@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private UserDetailsServiceImpl userDetailsService; // 인증 정보를 제공하는 객체

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // CSRF 보안 설정 해제
            .authorizeRequests() // 요청에 대한 권한 설정 시작
                .antMatchers("/api/user/**").hasRole("USER") // "/api/user/**"로 시작하는 요청은 USER 권한이 필요
                .antMatchers("/api/admin/**").hasRole("ADMIN") // "/api/admin/**"로 시작하는 요청은 ADMIN 권한이 필요
                .anyRequest().authenticated() // 그 외의 요청은 인증된 사용자만 접근 가능
                .and()
            .formLogin().disable() // 폼 기반 로그인 사용 안 함
            .logout() // 로그아웃 설정 시작
                .logoutUrl("/api/logout") // 로그아웃 URL 설정
                .logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler(HttpStatus.OK)) // 로그아웃 성공 시 HTTP 상태 코드 200 반환
                .invalidateHttpSession(true) // HTTP 세션 무효화 설정
                .deleteCookies("JSESSIONID"); // 쿠키 삭제
    }

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring()
            .antMatchers(HttpMethod.OPTIONS, "/**") // HTTP OPTIONS 요청은 모두 허용
            .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/v2/api-docs", "/webjars/**") // Swagger 문서 관련 요청은 모두 허용
            .antMatchers("/favicon.ico", "/error"); // 파비콘 요청 및 에러 페이지 요청은 모두 허용
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // BCrypt 해시 알고리즘 사용하는 PasswordEncoder Bean 등록
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder()); // UserDetailsService와 PasswordEncoder 설정
    }
}
